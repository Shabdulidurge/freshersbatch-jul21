
ASSIGNMENT - BASIC UNIX COMMAND LINE
NAME - SHABDULI DURGE

Assignments:-

1.List the contents of a directory and their attributes
-> ls command is used.
-> sample o/p - photo1.jpg , photo2.jpg, photo3.jpg, my-file

2.Long list the content with file, directory ownership, permissions,sizes, etc…
-> ls -l /etc/hosts 
-> -rw-r--r-- 1 root root 337 Aug 6 14:15 /etc/hosts


3.Display the size of the file in human readable format
-> ls -l
-> -rw-r--r-- 1 lubos lubos  20K Feb  1 12:12 file1
-rw-r--r-- 1  lubos lubos 451M Feb  1 12:12 file2
-rw-r--r-- 1 lubos lubos 1.2G Feb  1 12:12 file3
-rw-r--r-- 1 lubos lubos 122M Feb  1 12:12 file4

4.Show all files and folders including hidden one
-> ls -al Downloads
-> 

5.list directories recursively
-> ls -R

6.Sort the files by size with largest at the top
-> du -a --maxdepth=1| sort-n

7.Sort the files by last time modified displaying the newest first.
-> ls -lt|less
-> 

8.Diplay the location of a program/command, where it is installed.
-> dpkg-query -L APPLICATION-NAME

9.Which command is used to switch directory from one to another
-> cd

10.List all the environment variables set for the current shell environment
-> USER , HOME, EDITOR, SHELL etc

11.Did you notice something in the output of "env" command?
-> yes. 

12.Which command is used to print the text or any variables value in the Console/Terminal?
-> echo

13.Print the value of the env variable "PATH" on the console
-> printenv PATH

14.Is linux a case-sensitive operating system?
-> The file system in linux is case-sensitive

15.Is, "Ls" same as "ls"?
-> No

16.Display your currently logged in user
-> w command does this

17.how do you change the currrently logged in user to another user?
-> sudo command is used

18.Which command is used to leave a shell environment that you are currently logged in to?
-> exit command

19.How do you reboot the system?
-> su/sudo command used

20.How do you shutdown the system?
-> shutdown -r 

21.Display all the major running processes in the system
-> ps command

22.Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
->

23.Display the name of the system kernel
-> Linux

24.display the kernel release number
-> 5.8.0-1035-gcp

25.display teh machine type of the current kernel
-> 

26.Display the name of the operating system that the kernel is running on
-> Linux

27.Display all info that uname command can show.
-> Linux

28.Display the name of directory that you are currently pointing to
->/home/user

29.change the current directory to another directory that you have in your system.
-> cd Shabduli

30.Go up one directory
-> blank

31.Return to last directory
-> /home/user/Shabduli

32.change the current directory to home(logged in user's) directory
-> /home/user

33.How to check all the command used from the prompt (Command History)
-> history command is used

34.In which file the history of commands are stored in?
->  ~/. bash_history file by default.

35.How many lines of history does the system keep and from where you can change it?
-> 1000 lines. We can change it by modifying $HISTFILE

36.How can you modify bash's history behaviour
-> using PROMPT_COMMAND

37.Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.
-> 1  uname -r
    2  uname
    3  pwd
    4  ls
    5  ls user
    6  ls home
    7  mkdir Shabduli
    8  cd Shabduli
    9  cd ..
   10  cd-
   11  cd -
   12  cd /
   13  pwd
   14  cd pwd
   15  history

38.What are the different types of shell and where are they used and how do we use them?
-> C shell, bourne shell , korn shell , bourne-again shell. 
   C shell - It incorporated features such as aliases and command history. It includes helpful programming features like built-in arithmetic and C-like expression syntax.
   Bourne Shell - It is the original UNIX shell. It is faster and more preferred. It lacks features for interactive use like the ability to recall previous commands. 
                  It also lacks built-in arithmetic and logical expression handling. It is default shell for Solaris OS.
   Korn Shell -  It Was written by David Korn at AT&T Bell LabsIt is a superset of the Bourne shell.So it supports everything in the Bourne shell.It has interactive features. 
                 It includes features like built-in arithmetic and C-like arrays, functions, and string-manipulation facilities.
 n                It is faster than C shell. It is compatible with script written for C shell.
   Bash Shel - It is compatible to the Bourne shell. It includes features from Korn and Bourne shell.

39.What is the difference between login shell and non-login shell?
-> Difference is a dash symbol. A login Shell has a dash symbol and a non-login shell does not have a dash symbol

40.How do we start login shell and non-login shell?
-> Login Shell - 
   Press the menu button in the top-right corner of the window and select Preferences.

In the sidebar, select your current profile in the Profiles section.

Select Command.

Under the Command label, select Run command as a login shell.

   Non-login SHell - A Non login shell is started by a program without a login. In this case, the program just passes the name of the shell executable. For example, for a Bash shell it will be simply bash.

41.What happens when you start a login shell (which files are read and used and Why)?
-> When Bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, 
         if that file exists. After reading that file, 
      it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one that exists and is readable

42.What happens when you start a non-login shell (Which files are read and used and Why)?
-> When an interactive shell that is not a login shell is started, Bash reads and executes commands from ~/.bashrc, if that file exists. 
   This may be inhibited by using the --norc option. The --rcfile file option will force Bash to read and execute commands from file instead of ~/.bashrc.

43.What are Shell Configuration Files, why do we need it?
-> Shell configuration files are executed automatically when you log in and. out of a shell. They initialize and configure a shell upon login and. perform cleanup operations upon logout.

44.Explain the Order of file usage from the system/user's home directory when user logs in to the System.
-> 

45.What are Shell Variables, list major shell variables and what do they represent?
-> A variable is a character string to which we assign a value. The value assigned could be a number, text, filename, device, or any other type of data. $0, $n, $#, $*



46.How we see all our env variables?
-> run env at command line

47.How we see all env variables in alphabical order?
->we use command get-childitem env:*

48.What Format does the env var and its values are stored?
-> User level Environment variables are mostly stored in . bashrc and . profile files in your Home folder. Changes here only affect that particular user

49.How do you create your own varible?
-> To create a variable, you just provide a name and value for it. Your variable names should be descriptive and remind you of the value they hold.
 A variable name cannot start with a number, nor can it contain spaces. It can, however, start with an underscore

50.How do you start a new bash shell?
-> You can quickly launch it from within File Explorer by typing “bash” into the address bar and pressing Enter. 

51.Difference between Local/Shell variables to Global Variable
-> Local variable is declared inside a function whereas Global variable is declared outside the function

52.Making a variable accessible from other the shell in the system.
-> We can make use of /etc/environment

53.Show the real life use case of exporting a variable
-> export -p is command used and the output is as 

declare -x ANACONDA2019="/ext/anaconda-2019.03"
declare -x ANACONDA2020="/ext/anaconda2020.02"
declare -x ANACONDA3="/ext/anaconda3"
declare -x ANACONDA5="/ext/anaconda5"
declare -x BROWSER_PORT="6001"
declare -x COCALC_CODE_PORT="6004"
declare -x COCALC_EXTRA_ENV="e30="
declare -x COCALC_JUPYTERLAB_PORT="6002"
declare -x COCALC_JUPYTER_PORT="6003"
declare -x COCALC_NODE="kucalc-prod3-node-pxch"
declare -x COCALC_PLUTO_PORT="6005"
declare -x COCALC_PROJECT_CONFIG="eyJxdW90YSI6eyJuZXR3b3JrIjpmYWxzZSwibWVtYmVyX2hvc3QiOmZhbHNlLCJwcml2aWxlZ2VkIjpmYWxzZSwibWVtb3J5X3JlcXVlc3QiOjIwMCwiY3B1X3JlcXVlc3QiOjAuMDIsImRpc2tfcXVvdGEiOjMwMDAsIm1lbW9yeV9saW1pdCI6MTAwMCwiY3B1X2xpbWl0IjoxLCJpZGxlX3RpbWVvdXQiOjYwMCwiYWx3YXlzX3J1bm5pbmciOmZhbHNlfX0="
declare -x COCALC_PROJECT_DATASTORE="false"
declare -x COCALC_PROJECT_ID="c5cb8863-a6fe-4411-9ca2-7646b53d3d5d"
declare -x COCALC_PROJECT_IMAGE_NAME="ubuntu2004"
declare -x COCALC_ROOT="/co"
declare -x COCALC_SECRET_TOKEN="/secrets/secret-token/token"
declare -x COCALC_SSH_PORT="2222"
declare -x COCALC_TERMINAL_FILENAME=".2021-08-06-163055.term-0.term"
declare -x COCALC_ULIMIT_OPEN_FILES="10000"
declare -x COCALC_USERNAME="user"
declare -x DEBUG_HIDE_DATE="yes"
declare -x DISPLAY=":0"
declare -x ELAN_HOME="/ext/lean"
declare -x EXT="/ext"
declare -x HISTCONTROL="ignoredups"
declare -x HOME="/home/user"
declare -x HOSTNAME="project-c5cb8863-a6fe-4411-9ca2-7646b53d3d5d"
declare -x HUB_PORT="6000"
declare -x ISOCHRONES="/ext/data/isochrones"
declare -x JULIA_DEPOT_PATH="/home/user/.julia:/ext/julia/depot/"
declare -x JUPYTER_PATH="/ext/jupyter"
declare -x LANG="en_US.UTF-8"
declare -x LANGUAGE="en_US:en"
declare -x LC_ALL="C.UTF-8"
declare -x LESSCLOSE="/usr/bin/lesspipe %s %s"
declare -x LESSOPEN="| /usr/bin/lesspipe %s"
declare -x LESS_TERMCAP_se=""

54.Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"
-> done

55.What is Globbing? Explain in depth with examples?
->The Bash shell feature that is used for matching or expanding specific types of patterns is called globbing. Globbing is mainly used to match filenames or searching for content in a file

56.List all entries with extension ".sh"
-> 0 files with such extension

57.List all entries with numbers in it.
-> grep -x -E '[[:digit:]]+' command can do this
   output is 0

58.List all entries that starts with a character and ends with a number
-> grep '^a.*e$' file command can do this.
output obtained is 0

59.List all entries that name length more than 5 characters
-> 

60.What is Quoting? and Why do we need it?
-> Quoting is used to remove the special meaning of certain characters or words to the shell.

61.Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.
-> 

62.How do you find a particular files/directories based on a particular search criteria?
HINT:- look for commands -> locate, find and whereis
-> we can use find as - find . -name "pattern" -print
locate as - locate [OPTION]... PATTERN...
whereis as - whereis [OPTIONS] FILE_NAME...

63.Write major difference between locate, find and whereis?
-> Big difference is that find searches real files recursively down a given directory, while locate searches a database without requiring specific directory. 
  As for whereis and which, they search only inside those directories that are mentioned in your PATH variable and only those with executable permission set

64.How Globbing is different from locate, find and whereis?
-> Globbing is completely different as it is used for searching file names and for filename matching. Find,locate and whereis lookup on the directories, databases and directories in PATH variable.

65.Explain the Linux File System.
-> A Linux file system is a structured collection of files on a disk drive or a partition. A partition is a segment of memory and contains some specific data. 
  In our machine, there can be various partitions of the memory

66.Explain absolute and Relative Paths
-> An absolute path is defined as specifying the location of a file or directory from the root directory(/). In other words,we can say that an absolute path is a complete path from start of actual file system from / directory. Relative path. Relative path is defined as the path related to the present working directly(pwd) 

67.What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
-> cat,touch,vi,nano and gedit

68.In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
-> rm, unlink etc

69.Archiving files using linux command, write a command to archive set of files from linux commands.
-> tar [options] [archive-file] [file or directory to be archived]

70.Extract the archived files from the above step.
-> $ tar xvf file.tar